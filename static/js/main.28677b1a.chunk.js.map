{"version":3,"sources":["robots.js","Card.js","Cardlist.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","props","className","src","alt","Cardlist","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filterRobots","this","filter","robot","toLocaleLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAAaA,EAAS,CAClB,CACEC,GAAI,EACJC,KAAM,eACNC,SAAU,MACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC5CEC,EAbF,SAACC,GAAW,IACdJ,EAAmBI,EAAnBJ,KAAME,EAAaE,EAAbF,MAAOH,EAAMK,EAANL,GACpB,OACI,yBAAKM,UAAW,sDACZ,yBAAKC,IAAG,+BAA0BP,EAA1B,YAAwCQ,IAAI,UACpD,6BACI,4BAAKP,GACL,2BAAIE,MCYLM,EAnBE,SAAC,GAAc,IAAbV,EAAY,EAAZA,OACTW,EAAgBX,EAAOY,KAAI,SAACC,EAAMC,GAEhC,OAAO,kBAAC,EAAD,CACHC,IAAOD,EACPb,GAAKD,EAAOc,GAAGb,GACfC,KAAMF,EAAOc,GAAGZ,KAChBE,MAAOJ,EAAOc,GAAGV,WAK7B,OACI,6BACIO,ICDGK,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,6BACI,2BACIX,UAAW,mCACXY,KAAM,SACNC,YAAa,gBACbC,SAAUH,MCuBXI,E,YA1BX,aAAc,IAAD,8BACT,+CAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAER,YAAYO,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACT5B,OAAOA,EACPiB,YAAa,IAJR,E,sEAYJ,IAAD,OACEY,EAAeC,KAAKF,MAAM5B,OAAO+B,QAAO,SAAAC,GAC1C,OAAOA,EAAM9B,KAAK+B,oBAAoBC,SAAS,EAAKN,MAAMX,YAAYgB,wBAE1E,OACI,yBAAK1B,UAAU,MACX,sCACA,kBAAC,EAAD,CAAWW,aAAeY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUvB,OAAQ6B,S,GArBhBM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.28677b1a.chunk.js","sourcesContent":["export const robots = [\n    {\n      id: 1,\n      name: 'Mai Duy Dung',\n      username: 'Mai',\n      email: 'Maiduydungvn@gmail.com'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];","import React from 'react';\n\nconst Card = (props) => {\n    const {name, email, id} = props;\n    return(\n        <div className ='tc bg-light-blue dib br1 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='Robot' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\nconst Cardlist = ({robots}) => {\n    const cardComponent = robots.map((user, i) =>\n        {\n            return(<Card \n                key = {i} \n                id ={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}/>);\n        }\n    );\n\n\n    return(\n        <div>\n           {cardComponent}\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return(\n        <div>\n            <input \n                className ='pa3 ba b--green bg-lightest-blue'\n                type ='search' \n                placeholder ='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport { robots } from './robots';\nimport Cardlist  from './Cardlist';\nimport SearchBox from './SearchBox';\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            robots:robots,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield:event.target.value })\n    }\n\n    render(){\n        const filterRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase());\n        })\n        return(\n            <div className=\"tc\">\n                <h1>Robots</h1>\n                <SearchBox searchChange ={this.onSearchChange} />\n                <Cardlist robots={filterRobots}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}